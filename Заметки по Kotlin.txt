Заметки по Kotlin

Можно делать так (тип Int)
var forExample = "Gladiator".lenght // 9

В переменную можно засунуть условие (тип Boolean)
var forExample = 10 > 1 && 10 < 13 || 5 > 3

Затем использовать это в услувии
if (forExample) {
	//что-то делается
}

Можно присвоить условное выражение переменной
val a = 1
var forExample = if (a > 0) {
	"Больше нуля"
} else {
	"Меньше или равно нулю"
}

println(forExample) //Больше нуля

Если возвращается одно условие, можно писать без {}
forExample = if (a > 0) "Больше нуля"
			else "Меньше"

Упростим условие выше
forExample = if (a > 0) "Больше нуля" else "Меньше"

Условное выражение when
val race = "gnome"
val faction = when (race) {
	"dwarf" -> "Keepers of the Mines"
	"gnome" -> "Keepers of the Mines"
	"orc" -> "Free People of the Rolling Hills"
	"human" -> "Free People of the Rolling Hills"
	}

Шаблонные строки
name + " " + "blah blah"
исправим на 
"$name blah blah"

в (${}) фигурные скобки можно вставлять выражения
они будут вставлены в строку (их результат)
"Условие ${if (a > 0) "Больше нуля" else "Меньше"}"

Функции
private nameSomeFunction(numbers: Int): Int {
	// что-то делает
	return numbers
}

Передача лямбды в качестве аргумента
val numLetters = "Mississippi".count({ letter ->
	letter == 's'
})
print(numLetters) // 4

Простенькая лямбда
println({
	val currentYear = 2018
	"Welcome to SimVillage, Mayor! (copyright $currentYear)"
}())

Объявление функционального типа
someFunction: () -> String = {
	//что-то делает
}

() -> String - () это и есть функциональный тип
то что идет после -> String это возвращаемый тип.
Объявление такого типа у переменной someFunction
показывает, что данная переменная может 
присвоить любую функцию не принимающую аргументов,
т.е. (пустые скобки).

Аргументы
Сначала объявляем типы параметров, а сами
параметны объявляем в функции.
val someFunction:(String) -> String = {playerName ->
	// playerName cам параметр
	//что-то делает
}

Ключевое слово it
Если лямбда принимает 1 аргумент, вместо него
можно использовать it. Укажем только тип пар-ра.
val someFunctin:(String) -> String = {
	"вывожу параметр: $it"
}
Хорошо подойдет для не больших функций
"Mississippi".count({ it == 's' })

Вот функция
fun configureGreetingFunction(): (String) -> String {
    val structureType = "hospitals"
    var numBuildings = 5
    return {playerName: String ->
        val currentYear = 2022
        numBuildings += 1
        println("Adding $numBuildings $structureType")
        "Welcome to SimVillage, $playerName! (c) $currentYear"
    }
}

Строка (): (String) -> String {
	
}
я так понял означает функциональный тип лямбды.
по идее должно быть написано someFunction: (String) -> String
но тк лямбда это анонимная функция, то имени нету.
и получается просто (): (String) -> String


readline() - функция для ввода
var beverage = readLine()
println(beverage)

функция isNotBlank() возвращает true, если в переменной,
что-то есть, кроме пробела, пустой строки итп.

someString.indexOf('a') // получает индекс символа

someString.substring(0 until someString.IndexOf('a'))
substring принимает IntRange (тип, представляющий диапазон)

{"I'm $name"} //вот это встраивание $name называется интерполяция

Деструктуризация это объявление и инициализация нескольких переменных

Обход символов строки
"Dragon's Breath".forEach {
	println("$it\n")
}
Получим
D
r
a
g
o
n
итп.

Округление double
4.18999999995
округляем до 4.19
${"%.2f".format(someVarForRounding)}

.roundToInt() округляет до ближайшего целого числа

Представление целого числа в виде двоичного
Integer.toBinaryString(42)
101010

Создание списка
val patronList = listOf("Eli", "Mordoc", "Sophie")
patronList[0]
patronList.first() // Eli
patronList.last() // Sophie

Безопасный вызов по индексу
patronList.getOrElse(4) { "Unknown Patron" }

Или
patronList.getOrNull(4) ?: "Unkown patron"

Изменяемый список
mutableListOf

Изменение типа списка
toList
toMutableList

Цикл for
for (patron in patronList) {
	println("Hello $patron")
}

Чтение файла
val menuList = File("data/tavern-menu-items.txt")
					.readText()
					.split("\n")

Множества, тоже что и listOf \ mutableListOf только
setOf \ mutableSetOf

val planets = setOf("Mercury", "Venus", "Earth")
planets.elementAt(2) //вывод по индексу, но не как у listOf
Earth

Множества не поддерживают мутаторы для доступа по индексу


Цикл while

var orderCount = 0
while (orderCount <= 9) {
	placeOrder(uniquePatrons.shuffled().first(),
				menuList.shuffled().first())
	orderCount++
}

Прервать можно оператором break, просто вписать его куда-нибудь

Преобразовать список во множество, чтобы отбросить дубликаты
можно с помощью функции distinct()
val patrons = listOf("Eli Baggins", "Eli Baggins", "Eli Ironfoot").distinct()
[Eli Baggins, Eli Ironfoot]

Про списки
var myList: List<Int> = listOf(1,2,3)
(myList as MutableList)[2] = 1000
myList
[1, 2, 1000]

